# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:33:19+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any as Any_aliased
from typing import Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any_aliased]):
    root: Any_aliased


class AnalyzedResourceCount(RootModel[int]):
    root: int


class AnomalyDescription(RootModel[str]):
    root: str


class AnomalyId(RootModel[constr(pattern=r'^[\w~.-]*$', min_length=1, max_length=100)]):
    root: constr(pattern=r'^[\w~.-]*$', min_length=1, max_length=100)


class AnomalyLimit(RootModel[float]):
    root: float


class AnomalyName(RootModel[str]):
    root: str


class AnomalySeverity(Enum):
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'


class AnomalySource(RootModel[str]):
    root: str


class AnomalyStatus(Enum):
    ONGOING = 'ONGOING'
    CLOSED = 'CLOSED'


class AnomalyType(Enum):
    CAUSAL = 'CAUSAL'
    CONTEXTUAL = 'CONTEXTUAL'


class AppBoundaryKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class AwsAccountId(
    RootModel[constr(pattern=r'^\d{12}$', min_length=12, max_length=12)]
):
    root: constr(pattern=r'^\d{12}$', min_length=12, max_length=12)


class ClientToken(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9]+[a-zA-Z0-9-]*$', min_length=1, max_length=100)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9]+[a-zA-Z0-9-]*$', min_length=1, max_length=100)


class CloudWatchMetricDataStatusCode(Enum):
    Complete = 'Complete'
    InternalError = 'InternalError'
    PartialData = 'PartialData'


class CloudWatchMetricsDimensionName(RootModel[str]):
    root: str


class CloudWatchMetricsDimensionValue(RootModel[str]):
    root: str


class CloudWatchMetricsMetricName(RootModel[str]):
    root: str


class CloudWatchMetricsNamespace(RootModel[str]):
    root: str


class CloudWatchMetricsPeriod(RootModel[int]):
    root: int


class CloudWatchMetricsStat(Enum):
    Sum = 'Sum'
    Average = 'Average'
    SampleCount = 'SampleCount'
    Minimum = 'Minimum'
    Maximum = 'Maximum'
    p99 = 'p99'
    p90 = 'p90'
    p50 = 'p50'


class CloudWatchMetricsUnit(RootModel[str]):
    root: str


class ConflictException(RootModel[Any_aliased]):
    root: Any_aliased


class Cost(RootModel[float]):
    root: float


class CostEstimationServiceResourceCount(RootModel[int]):
    root: int


class CostEstimationServiceResourceState(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


class CostEstimationStatus(Enum):
    ONGOING = 'ONGOING'
    COMPLETED = 'COMPLETED'


class DeleteInsightRequest(BaseModel):
    pass


class DeleteInsightResponse(BaseModel):
    pass


class DescribeAccountHealthRequest(BaseModel):
    pass


class DescribeAnomalyRequest(BaseModel):
    pass


class DescribeEventSourcesConfigRequest(BaseModel):
    pass


class DescribeInsightRequest(BaseModel):
    pass


class DescribeResourceCollectionHealthRequest(BaseModel):
    pass


class DescribeServiceIntegrationRequest(BaseModel):
    pass


class EventClass(Enum):
    INFRASTRUCTURE = 'INFRASTRUCTURE'
    DEPLOYMENT = 'DEPLOYMENT'
    SECURITY_CHANGE = 'SECURITY_CHANGE'
    CONFIG_CHANGE = 'CONFIG_CHANGE'
    SCHEMA_CHANGE = 'SCHEMA_CHANGE'


class EventDataSource(Enum):
    AWS_CLOUD_TRAIL = 'AWS_CLOUD_TRAIL'
    AWS_CODE_DEPLOY = 'AWS_CODE_DEPLOY'


class EventId(RootModel[str]):
    root: str


class EventName(RootModel[constr(min_length=0, max_length=50)]):
    root: constr(min_length=0, max_length=50)


class EventResourceArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[-a-z]*:[a-z0-9-]*:[a-z0-9-]*:\d{12}:.*$',
            min_length=36,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[-a-z]*:[a-z0-9-]*:[a-z0-9-]*:\d{12}:.*$',
        min_length=36,
        max_length=2048,
    )


class EventResourceName(
    RootModel[constr(pattern=r'^.*$', min_length=0, max_length=2048)]
):
    root: constr(pattern=r'^.*$', min_length=0, max_length=2048)


class EventResourceType(
    RootModel[constr(pattern=r'^.*$', min_length=0, max_length=2048)]
):
    root: constr(pattern=r'^.*$', min_length=0, max_length=2048)


class EventSource(
    RootModel[
        constr(
            pattern=r'^[a-z]+[a-z0-9]*\.amazonaws\.com|aws\.events$',
            min_length=10,
            max_length=50,
        )
    ]
):
    root: constr(
        pattern=r'^[a-z]+[a-z0-9]*\.amazonaws\.com|aws\.events$',
        min_length=10,
        max_length=50,
    )


class EventSourceOptInStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class Explanation(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class GetCostEstimationRequest(BaseModel):
    pass


class GetResourceCollectionRequest(BaseModel):
    pass


class InsightDescription(RootModel[str]):
    root: str


class InsightFeedbackOption(Enum):
    VALID_COLLECTION = 'VALID_COLLECTION'
    RECOMMENDATION_USEFUL = 'RECOMMENDATION_USEFUL'
    ALERT_TOO_SENSITIVE = 'ALERT_TOO_SENSITIVE'
    DATA_NOISY_ANOMALY = 'DATA_NOISY_ANOMALY'
    DATA_INCORRECT = 'DATA_INCORRECT'


class InsightId(RootModel[constr(pattern=r'^[\w-]*$', min_length=1, max_length=100)]):
    root: constr(pattern=r'^[\w-]*$', min_length=1, max_length=100)


class InsightName(
    RootModel[constr(pattern=r'^[\s\S]*$', min_length=1, max_length=530)]
):
    root: constr(pattern=r'^[\s\S]*$', min_length=1, max_length=530)


class InsightSeverity(Enum):
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'


class InsightStatus(Enum):
    ONGOING = 'ONGOING'
    CLOSED = 'CLOSED'


class InsightStatuses(RootModel[List[InsightStatus]]):
    root: List[InsightStatus] = Field(..., max_length=2, min_length=0)


class InsightType(Enum):
    REACTIVE = 'REACTIVE'
    PROACTIVE = 'PROACTIVE'


class InternalServerException(RootModel[Any_aliased]):
    root: Any_aliased


class ListAnomaliesForInsightMaxResults(RootModel[conint(ge=1, le=500)]):
    root: conint(ge=1, le=500)


class ListAnomalousLogGroupsMaxResults(RootModel[conint(ge=1, le=200)]):
    root: conint(ge=1, le=200)


class ListEventsMaxResults(RootModel[conint(ge=1, le=200)]):
    root: conint(ge=1, le=200)


class ListInsightsAccountIdList(RootModel[List[AwsAccountId]]):
    root: List[AwsAccountId] = Field(..., max_length=1, min_length=0)


class ListInsightsMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ListInsightsOngoingStatusFilter(BaseModel):
    Type: InsightType


class ListMonitoredResourcesMaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class Locale(Enum):
    DE_DE = 'DE_DE'
    EN_US = 'EN_US'
    EN_GB = 'EN_GB'
    ES_ES = 'ES_ES'
    FR_FR = 'FR_FR'
    IT_IT = 'IT_IT'
    JA_JP = 'JA_JP'
    KO_KR = 'KO_KR'
    PT_BR = 'PT_BR'
    ZH_CN = 'ZH_CN'
    ZH_TW = 'ZH_TW'


class LogAnomalyToken(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class LogAnomalyType(Enum):
    KEYWORD = 'KEYWORD'
    KEYWORD_TOKEN = 'KEYWORD_TOKEN'
    FORMAT = 'FORMAT'
    HTTP_CODE = 'HTTP_CODE'
    BLOCK_FORMAT = 'BLOCK_FORMAT'
    NUMERICAL_POINT = 'NUMERICAL_POINT'
    NUMERICAL_NAN = 'NUMERICAL_NAN'
    NEW_FIELD_NAME = 'NEW_FIELD_NAME'


class LogEventId(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class LogGroupName(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class LogStreamName(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class MeanTimeToRecoverInMilliseconds(RootModel[int]):
    root: int


class MetricValue(RootModel[float]):
    root: float


class MonitoredResourceName(
    RootModel[constr(pattern=r'[\.\-_\/#A-Za-z0-9]+', min_length=1, max_length=512)]
):
    root: constr(pattern=r'[\.\-_\/#A-Za-z0-9]+', min_length=1, max_length=512)


class NotificationChannelId(
    RootModel[
        constr(
            pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
            min_length=36,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
        min_length=36,
        max_length=36,
    )


class NotificationMessageType(Enum):
    NEW_INSIGHT = 'NEW_INSIGHT'
    CLOSED_INSIGHT = 'CLOSED_INSIGHT'
    NEW_ASSOCIATION = 'NEW_ASSOCIATION'
    SEVERITY_UPGRADED = 'SEVERITY_UPGRADED'
    NEW_RECOMMENDATION = 'NEW_RECOMMENDATION'


class NotificationMessageTypes(RootModel[List[NotificationMessageType]]):
    root: List[NotificationMessageType] = Field(..., max_length=5, min_length=0)


class NumMetricsAnalyzed(RootModel[int]):
    root: int


class NumOpenProactiveInsights(RootModel[int]):
    root: int


class NumOpenReactiveInsights(RootModel[int]):
    root: int


class NumProactiveInsights(RootModel[int]):
    root: int


class NumReactiveInsights(RootModel[int]):
    root: int


class NumberOfLogLinesOccurrences(RootModel[int]):
    root: int


class NumberOfLogLinesScanned(RootModel[int]):
    root: int


class OptInStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class OrganizationResourceCollectionMaxResults(RootModel[conint(ge=1, le=500)]):
    root: conint(ge=1, le=500)


class OrganizationResourceCollectionType(Enum):
    AWS_CLOUD_FORMATION = 'AWS_CLOUD_FORMATION'
    AWS_SERVICE = 'AWS_SERVICE'
    AWS_ACCOUNT = 'AWS_ACCOUNT'
    AWS_TAGS = 'AWS_TAGS'


class OrganizationalUnitId(
    RootModel[constr(pattern=r'^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$', max_length=68)]
):
    root: constr(pattern=r'^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$', max_length=68)


class OrganizationalUnitIdList(RootModel[List[OrganizationalUnitId]]):
    root: List[OrganizationalUnitId] = Field(..., max_length=5, min_length=0)


class PerformanceInsightsMetricDimension(RootModel[str]):
    root: str


class PerformanceInsightsMetricDimensions(
    RootModel[List[PerformanceInsightsMetricDimension]]
):
    root: List[PerformanceInsightsMetricDimension]


class PerformanceInsightsMetricDisplayName(RootModel[str]):
    root: str


class PerformanceInsightsMetricFilterKey(RootModel[str]):
    root: str


class PerformanceInsightsMetricFilterValue(RootModel[str]):
    root: str


class PerformanceInsightsMetricGroup(RootModel[str]):
    root: str


class PerformanceInsightsMetricLimitInteger(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class PerformanceInsightsMetricName(RootModel[str]):
    root: str


class PerformanceInsightsMetricUnit(RootModel[str]):
    root: str


class PerformanceInsightsReferenceName(RootModel[str]):
    root: str


class PerformanceInsightsStatType(RootModel[str]):
    root: str


class PerformanceInsightsValueDouble(RootModel[float]):
    root: float


class PutFeedbackResponse(BaseModel):
    pass


class RecommendationCategory(RootModel[str]):
    root: str


class RecommendationDescription(RootModel[str]):
    root: str


class RecommendationLink(RootModel[str]):
    root: str


class RecommendationName(RootModel[str]):
    root: str


class RecommendationReason(RootModel[str]):
    root: str


class RecommendationRelatedAnomalyResourceName(RootModel[str]):
    root: str


class RecommendationRelatedAnomalyResourceType(RootModel[str]):
    root: str


class RecommendationRelatedCloudWatchMetricsSourceMetricName(RootModel[str]):
    root: str


class RecommendationRelatedCloudWatchMetricsSourceNamespace(RootModel[str]):
    root: str


class RecommendationRelatedEventName(RootModel[str]):
    root: str


class RecommendationRelatedEventResourceName(RootModel[str]):
    root: str


class RecommendationRelatedEventResourceType(RootModel[str]):
    root: str


class RemoveNotificationChannelRequest(BaseModel):
    pass


class RemoveNotificationChannelResponse(BaseModel):
    pass


class ResourceArn(RootModel[constr(min_length=20, max_length=2048)]):
    root: constr(min_length=20, max_length=2048)


class ResourceCollectionType(Enum):
    AWS_CLOUD_FORMATION = 'AWS_CLOUD_FORMATION'
    AWS_SERVICE = 'AWS_SERVICE'
    AWS_TAGS = 'AWS_TAGS'


class ResourceHours(RootModel[int]):
    root: int


class ResourceName(RootModel[str]):
    root: str


class ResourceNotFoundException(RootModel[Any_aliased]):
    root: Any_aliased


class ResourcePermission(Enum):
    FULL_PERMISSION = 'FULL_PERMISSION'
    MISSING_PERMISSION = 'MISSING_PERMISSION'


class ResourceType(
    RootModel[
        constr(pattern=r'^[a-zA-Z]+[a-zA-Z0-9-_:]*$', min_length=1, max_length=256)
    ]
):
    root: constr(pattern=r'^[a-zA-Z]+[a-zA-Z0-9-_:]*$', min_length=1, max_length=256)


class ResourceTypeFilter(Enum):
    LOG_GROUPS = 'LOG_GROUPS'
    CLOUDFRONT_DISTRIBUTION = 'CLOUDFRONT_DISTRIBUTION'
    DYNAMODB_TABLE = 'DYNAMODB_TABLE'
    EC2_NAT_GATEWAY = 'EC2_NAT_GATEWAY'
    ECS_CLUSTER = 'ECS_CLUSTER'
    ECS_SERVICE = 'ECS_SERVICE'
    EKS_CLUSTER = 'EKS_CLUSTER'
    ELASTIC_BEANSTALK_ENVIRONMENT = 'ELASTIC_BEANSTALK_ENVIRONMENT'
    ELASTIC_LOAD_BALANCER_LOAD_BALANCER = 'ELASTIC_LOAD_BALANCER_LOAD_BALANCER'
    ELASTIC_LOAD_BALANCING_V2_LOAD_BALANCER = 'ELASTIC_LOAD_BALANCING_V2_LOAD_BALANCER'
    ELASTIC_LOAD_BALANCING_V2_TARGET_GROUP = 'ELASTIC_LOAD_BALANCING_V2_TARGET_GROUP'
    ELASTICACHE_CACHE_CLUSTER = 'ELASTICACHE_CACHE_CLUSTER'
    ELASTICSEARCH_DOMAIN = 'ELASTICSEARCH_DOMAIN'
    KINESIS_STREAM = 'KINESIS_STREAM'
    LAMBDA_FUNCTION = 'LAMBDA_FUNCTION'
    OPEN_SEARCH_SERVICE_DOMAIN = 'OPEN_SEARCH_SERVICE_DOMAIN'
    RDS_DB_INSTANCE = 'RDS_DB_INSTANCE'
    RDS_DB_CLUSTER = 'RDS_DB_CLUSTER'
    REDSHIFT_CLUSTER = 'REDSHIFT_CLUSTER'
    ROUTE53_HOSTED_ZONE = 'ROUTE53_HOSTED_ZONE'
    ROUTE53_HEALTH_CHECK = 'ROUTE53_HEALTH_CHECK'
    S3_BUCKET = 'S3_BUCKET'
    SAGEMAKER_ENDPOINT = 'SAGEMAKER_ENDPOINT'
    SNS_TOPIC = 'SNS_TOPIC'
    SQS_QUEUE = 'SQS_QUEUE'
    STEP_FUNCTIONS_ACTIVITY = 'STEP_FUNCTIONS_ACTIVITY'
    STEP_FUNCTIONS_STATE_MACHINE = 'STEP_FUNCTIONS_STATE_MACHINE'


class ResourceTypeFilters(RootModel[List[ResourceTypeFilter]]):
    root: List[ResourceTypeFilter]


class SearchInsightsAccountIdList(RootModel[List[AwsAccountId]]):
    root: List[AwsAccountId] = Field(..., max_length=1, min_length=1)


class SearchInsightsMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class SearchOrganizationInsightsMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ServiceInsightHealth(BaseModel):
    OpenProactiveInsights: Optional[NumOpenProactiveInsights] = None
    OpenReactiveInsights: Optional[NumOpenReactiveInsights] = None


class ServiceName(Enum):
    API_GATEWAY = 'API_GATEWAY'
    APPLICATION_ELB = 'APPLICATION_ELB'
    AUTO_SCALING_GROUP = 'AUTO_SCALING_GROUP'
    CLOUD_FRONT = 'CLOUD_FRONT'
    DYNAMO_DB = 'DYNAMO_DB'
    EC2 = 'EC2'
    ECS = 'ECS'
    EKS = 'EKS'
    ELASTIC_BEANSTALK = 'ELASTIC_BEANSTALK'
    ELASTI_CACHE = 'ELASTI_CACHE'
    ELB = 'ELB'
    ES = 'ES'
    KINESIS = 'KINESIS'
    LAMBDA = 'LAMBDA'
    NAT_GATEWAY = 'NAT_GATEWAY'
    NETWORK_ELB = 'NETWORK_ELB'
    RDS = 'RDS'
    REDSHIFT = 'REDSHIFT'
    ROUTE_53 = 'ROUTE_53'
    S3 = 'S3'
    SAGE_MAKER = 'SAGE_MAKER'
    SNS = 'SNS'
    SQS = 'SQS'
    STEP_FUNCTIONS = 'STEP_FUNCTIONS'
    SWF = 'SWF'


class ServiceNames(RootModel[List[ServiceName]]):
    root: List[ServiceName]


class ServiceQuotaExceededException(RootModel[Any_aliased]):
    root: Any_aliased


class ServiceResourceCost(BaseModel):
    Cost_1: Optional[Cost] = Field(None, alias='Cost')
    Count: Optional[CostEstimationServiceResourceCount] = None
    State: Optional[CostEstimationServiceResourceState] = None
    Type: Optional[ResourceType] = None
    UnitCost: Optional[Cost] = None


class ServiceResourceCosts(RootModel[List[ServiceResourceCost]]):
    root: List[ServiceResourceCost]


class SsmOpsItemId(RootModel[constr(pattern=r'^.*$', min_length=1, max_length=100)]):
    root: constr(pattern=r'^.*$', min_length=1, max_length=100)


class StackName(
    RootModel[
        constr(pattern=r'^[a-zA-Z*]+[a-zA-Z0-9-]*$', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'^[a-zA-Z*]+[a-zA-Z0-9-]*$', min_length=1, max_length=128)


class StackNames(RootModel[List[StackName]]):
    root: List[StackName]


class StartCostEstimationResponse(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*|\*)$', min_length=0, max_length=256
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*|\*)$', min_length=0, max_length=256
    )


class TagValues(RootModel[List[TagValue]]):
    root: List[TagValue]


class ThrottlingException(RootModel[Any_aliased]):
    root: Any_aliased


class Timestamp(RootModel[datetime]):
    root: datetime


class TimestampMetricValuePair(BaseModel):
    MetricValue_1: Optional[MetricValue] = Field(None, alias='MetricValue')
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')


class TimestampMetricValuePairList(RootModel[List[TimestampMetricValuePair]]):
    root: List[TimestampMetricValuePair]


class TopicArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[a-z0-9-]*:sns:[a-z0-9-]+:\d{12}:[^:]+$',
            min_length=36,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[a-z0-9-]*:sns:[a-z0-9-]+:\d{12}:[^:]+$',
        min_length=36,
        max_length=1024,
    )


class UpdateEventSourcesConfigResponse(BaseModel):
    pass


class UpdateResourceCollectionAction(Enum):
    ADD = 'ADD'
    REMOVE = 'REMOVE'


class UpdateResourceCollectionResponse(BaseModel):
    pass


class UpdateServiceIntegrationResponse(BaseModel):
    pass


class UpdateStackNames(RootModel[List[StackName]]):
    root: List[StackName] = Field(..., max_length=100, min_length=0)


class UpdateTagValues(RootModel[List[TagValue]]):
    root: List[TagValue] = Field(..., max_length=100, min_length=0)


class UuidNextToken(
    RootModel[
        constr(
            pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
            min_length=36,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
        min_length=36,
        max_length=36,
    )


class ValidationException(RootModel[Any_aliased]):
    root: Any_aliased


class AccountsOverviewPostRequest(BaseModel):
    FromTime: datetime = Field(
        ...,
        description=' The start of the time range passed in. The start time granularity is at the day level. The floor of the start time is used. Returned information occurred after this day. ',
    )
    ToTime: Optional[datetime] = Field(
        None,
        description=' The end of the time range passed in. The start time granularity is at the day level. The floor of the start time is used. Returned information occurred before this day. If this is not specified, then the current day is used. ',
    )


class StartTimeRange(BaseModel):
    FromTime: Optional[Timestamp] = None
    ToTime: Optional[Timestamp] = None


class ChannelsPostRequest(BaseModel):
    NextToken: Optional[
        constr(
            pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
            min_length=36,
            max_length=36,
        )
    ] = Field(
        None,
        description='The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.',
    )


class FeedbackPostRequest(BaseModel):
    InsightId: Optional[constr(pattern=r'^[\w-]*$', min_length=1, max_length=100)] = (
        Field(
            None,
            description=' The ID of the insight for which the feedback was provided. ',
        )
    )


class InsightFeedback(BaseModel):
    Feedback: Optional[InsightFeedbackOption] = None
    Id: Optional[InsightId] = None


class FeedbackPutRequest(BaseModel):
    InsightFeedback_1: Optional[InsightFeedback] = Field(
        None,
        alias='InsightFeedback',
        description=' Information about insight feedback received from a customer. ',
    )


class Type(Enum):
    REACTIVE = 'REACTIVE'
    PROACTIVE = 'PROACTIVE'


class ListLogAnomaliesPostRequest(BaseModel):
    InsightId: constr(pattern=r'^[\w-]*$', min_length=1, max_length=100) = Field(
        ..., description=' The ID of the insight containing the log groups. '
    )
    MaxResults: Optional[conint(ge=1, le=200)] = Field(
        None,
        description='The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.',
    )
    NextToken: Optional[
        constr(
            pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
            min_length=36,
            max_length=36,
        )
    ] = Field(
        None,
        description='The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.',
    )


class Filters3(BaseModel):
    ResourcePermission_1: Optional[ResourcePermission] = Field(
        None, alias='ResourcePermission'
    )
    ResourceTypeFilters_1: Optional[ResourceTypeFilters] = Field(
        None, alias='ResourceTypeFilters'
    )


class MonitoredResourcesPostRequest(BaseModel):
    Filters: Optional[Filters3] = Field(
        None,
        description=' Filters to determine which monitored resources you want to retrieve. You can filter by resource type or resource permission status. ',
    )
    MaxResults: Optional[conint(ge=1, le=50)] = Field(
        None,
        description='The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.',
    )
    NextToken: Optional[
        constr(
            pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
            min_length=36,
            max_length=36,
        )
    ] = Field(
        None,
        description='The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.',
    )


class OrganizationHealthPostRequest(BaseModel):
    AccountIds: Optional[List[AwsAccountId]] = Field(
        None,
        description='The ID of the Amazon Web Services account.',
        max_length=5,
        min_length=0,
    )
    OrganizationalUnitIds: Optional[List[OrganizationalUnitId]] = Field(
        None,
        description='The ID of the organizational unit.',
        max_length=5,
        min_length=0,
    )


class OrganizationHealthResourceCollectionPostRequest(BaseModel):
    AccountIds: Optional[List[AwsAccountId]] = Field(
        None,
        description='The ID of the Amazon Web Services account.',
        max_length=5,
        min_length=0,
    )
    MaxResults: Optional[conint(ge=1, le=500)] = Field(
        None,
        description='The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.',
    )
    NextToken: Optional[
        constr(
            pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
            min_length=36,
            max_length=36,
        )
    ] = Field(
        None,
        description='The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.',
    )
    OrganizationResourceCollectionType_1: OrganizationResourceCollectionType = Field(
        ...,
        alias='OrganizationResourceCollectionType',
        description=' An Amazon Web Services resource collection type. This type specifies how analyzed Amazon Web Services resources are defined. The two types of Amazon Web Services resource collections supported are Amazon Web Services CloudFormation stacks and Amazon Web Services resources that contain the same Amazon Web Services tag. DevOps Guru can be configured to analyze the Amazon Web Services resources that are defined in the stacks or that are tagged using the same tag <i>key</i>. You can specify up to 500 Amazon Web Services CloudFormation stacks. ',
    )
    OrganizationalUnitIds: Optional[List[OrganizationalUnitId]] = Field(
        None,
        description='The ID of the organizational unit.',
        max_length=5,
        min_length=0,
    )


class OrganizationOverviewPostRequest(BaseModel):
    AccountIds: Optional[List[AwsAccountId]] = Field(
        None,
        description='The ID of the Amazon Web Services account.',
        max_length=5,
        min_length=0,
    )
    FromTime: datetime = Field(
        ...,
        description=' The start of the time range passed in. The start time granularity is at the day level. The floor of the start time is used. Returned information occurred after this day. ',
    )
    OrganizationalUnitIds: Optional[List[OrganizationalUnitId]] = Field(
        None,
        description='The ID of the organizational unit.',
        max_length=5,
        min_length=0,
    )
    ToTime: Optional[datetime] = Field(
        None,
        description=' The end of the time range passed in. The start time granularity is at the day level. The floor of the start time is used. Returned information occurred before this day. If this is not specified, then the current day is used. ',
    )


class RecommendationsPostRequest(BaseModel):
    AccountId: Optional[constr(pattern=r'^\d{12}$', min_length=12, max_length=12)] = (
        Field(None, description='The ID of the Amazon Web Services account. ')
    )
    InsightId: constr(pattern=r'^[\w-]*$', min_length=1, max_length=100) = Field(
        ..., description=' The ID of the requested insight. '
    )
    Locale_1: Optional[Locale] = Field(
        None,
        alias='Locale',
        description='A locale that specifies the language to use for recommendations.',
    )
    NextToken: Optional[
        constr(
            pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
            min_length=36,
            max_length=36,
        )
    ] = Field(
        None,
        description='The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.',
    )


class Action(Enum):
    ADD = 'ADD'
    REMOVE = 'REMOVE'


class AccountIdList(RootModel[List[AwsAccountId]]):
    root: List[AwsAccountId] = Field(..., max_length=5, min_length=0)


class AccountInsightHealth(BaseModel):
    OpenProactiveInsights: Optional[NumOpenProactiveInsights] = None
    OpenReactiveInsights: Optional[NumOpenReactiveInsights] = None


class AddNotificationChannelResponse(BaseModel):
    Id: NotificationChannelId


class AmazonCodeGuruProfilerIntegration(BaseModel):
    Status: Optional[EventSourceOptInStatus] = None


class AnomalyReportedTimeRange(BaseModel):
    CloseTime: Optional[Timestamp] = None
    OpenTime: Timestamp


class AnomalyResource(BaseModel):
    Name: Optional[ResourceName] = None
    Type: Optional[ResourceType] = None


class AnomalyResources(RootModel[List[AnomalyResource]]):
    root: List[AnomalyResource]


class AnomalySourceMetadata(BaseModel):
    Source: Optional[AnomalySource] = None
    SourceResourceName: Optional[ResourceName] = None
    SourceResourceType: Optional[ResourceType] = None


class AnomalyTimeRange(BaseModel):
    EndTime: Optional[Timestamp] = None
    StartTime: Timestamp


class AssociatedResourceArns(RootModel[List[ResourceArn]]):
    root: List[ResourceArn]


class CloudFormationCollection(BaseModel):
    StackNames_1: Optional[StackNames] = Field(None, alias='StackNames')


class CloudFormationCollectionFilter(BaseModel):
    StackNames_1: Optional[StackNames] = Field(None, alias='StackNames')


class CloudWatchMetricsDataSummary(BaseModel):
    StatusCode: Optional[CloudWatchMetricDataStatusCode] = None
    TimestampMetricValuePairList_1: Optional[TimestampMetricValuePairList] = Field(
        None, alias='TimestampMetricValuePairList'
    )


class CloudWatchMetricsDimension(BaseModel):
    Name: Optional[CloudWatchMetricsDimensionName] = None
    Value: Optional[CloudWatchMetricsDimensionValue] = None


class CloudWatchMetricsDimensions(RootModel[List[CloudWatchMetricsDimension]]):
    root: List[CloudWatchMetricsDimension]


class CostEstimationStackNames(RootModel[List[StackName]]):
    root: List[StackName] = Field(..., max_length=1, min_length=1)


class CostEstimationTagValues(RootModel[List[TagValue]]):
    root: List[TagValue] = Field(..., max_length=1, min_length=1)


class CostEstimationTimeRange(BaseModel):
    EndTime: Optional[Timestamp] = None
    StartTime: Optional[Timestamp] = None


class DescribeAccountHealthResponse(BaseModel):
    AnalyzedResourceCount_1: Optional[AnalyzedResourceCount] = Field(
        None, alias='AnalyzedResourceCount'
    )
    MetricsAnalyzed: NumMetricsAnalyzed
    OpenProactiveInsights: NumOpenProactiveInsights
    OpenReactiveInsights: NumOpenReactiveInsights
    ResourceHours_1: ResourceHours = Field(..., alias='ResourceHours')


class DescribeAccountOverviewRequest(BaseModel):
    FromTime: Timestamp
    ToTime: Optional[Timestamp] = None


class DescribeAccountOverviewResponse(BaseModel):
    MeanTimeToRecoverInMilliseconds_1: MeanTimeToRecoverInMilliseconds = Field(
        ..., alias='MeanTimeToRecoverInMilliseconds'
    )
    ProactiveInsights: NumProactiveInsights
    ReactiveInsights: NumReactiveInsights


class DescribeFeedbackRequest(BaseModel):
    InsightId_1: Optional[InsightId] = Field(None, alias='InsightId')


class DescribeOrganizationHealthRequest(BaseModel):
    AccountIds: Optional[AccountIdList] = None
    OrganizationalUnitIds: Optional[OrganizationalUnitIdList] = None


class DescribeOrganizationHealthResponse(BaseModel):
    MetricsAnalyzed: NumMetricsAnalyzed
    OpenProactiveInsights: NumOpenProactiveInsights
    OpenReactiveInsights: NumOpenReactiveInsights
    ResourceHours_1: ResourceHours = Field(..., alias='ResourceHours')


class DescribeOrganizationOverviewRequest(BaseModel):
    AccountIds: Optional[AccountIdList] = None
    FromTime: Timestamp
    OrganizationalUnitIds: Optional[OrganizationalUnitIdList] = None
    ToTime: Optional[Timestamp] = None


class DescribeOrganizationOverviewResponse(BaseModel):
    ProactiveInsights: NumProactiveInsights
    ReactiveInsights: NumReactiveInsights


class DescribeOrganizationResourceCollectionHealthRequest(BaseModel):
    AccountIds: Optional[AccountIdList] = None
    MaxResults: Optional[OrganizationResourceCollectionMaxResults] = None
    NextToken: Optional[UuidNextToken] = None
    OrganizationResourceCollectionType_1: OrganizationResourceCollectionType = Field(
        ..., alias='OrganizationResourceCollectionType'
    )
    OrganizationalUnitIds: Optional[OrganizationalUnitIdList] = None


class EndTimeRange(BaseModel):
    FromTime: Optional[Timestamp] = None
    ToTime: Optional[Timestamp] = None


class EventResource(BaseModel):
    Arn: Optional[EventResourceArn] = None
    Name: Optional[EventResourceName] = None
    Type: Optional[EventResourceType] = None


class EventResources(RootModel[List[EventResource]]):
    root: List[EventResource]


class EventSourcesConfig(BaseModel):
    AmazonCodeGuruProfiler: Optional[AmazonCodeGuruProfilerIntegration] = None


class EventTimeRange(BaseModel):
    FromTime: Timestamp
    ToTime: Timestamp


class InsightHealth(BaseModel):
    MeanTimeToRecoverInMilliseconds_1: Optional[MeanTimeToRecoverInMilliseconds] = (
        Field(None, alias='MeanTimeToRecoverInMilliseconds')
    )
    OpenProactiveInsights: Optional[NumOpenProactiveInsights] = None
    OpenReactiveInsights: Optional[NumOpenReactiveInsights] = None


class InsightSeverities(RootModel[List[InsightSeverity]]):
    root: List[InsightSeverity] = Field(..., max_length=3, min_length=0)


class InsightTimeRange(BaseModel):
    EndTime: Optional[Timestamp] = None
    StartTime: Timestamp


class ListAnomalousLogGroupsRequest(BaseModel):
    InsightId_1: InsightId = Field(..., alias='InsightId')
    MaxResults: Optional[ListAnomalousLogGroupsMaxResults] = None
    NextToken: Optional[UuidNextToken] = None


class ListInsightsClosedStatusFilter(BaseModel):
    EndTimeRange_1: EndTimeRange = Field(..., alias='EndTimeRange')
    Type: InsightType


class ListInsightsOrganizationalUnitIdList(RootModel[List[OrganizationalUnitId]]):
    root: List[OrganizationalUnitId] = Field(..., max_length=1, min_length=0)


class ListMonitoredResourcesFilters(BaseModel):
    ResourcePermission_1: ResourcePermission = Field(..., alias='ResourcePermission')
    ResourceTypeFilters_1: ResourceTypeFilters = Field(..., alias='ResourceTypeFilters')


class ListMonitoredResourcesRequest(BaseModel):
    Filters: Optional[ListMonitoredResourcesFilters] = None
    MaxResults: Optional[ListMonitoredResourcesMaxResults] = None
    NextToken: Optional[UuidNextToken] = None


class ListNotificationChannelsRequest(BaseModel):
    NextToken: Optional[UuidNextToken] = None


class ListRecommendationsRequest(BaseModel):
    AccountId: Optional[AwsAccountId] = None
    InsightId_1: InsightId = Field(..., alias='InsightId')
    Locale_1: Optional[Locale] = Field(None, alias='Locale')
    NextToken: Optional[UuidNextToken] = None


class LogAnomalyClass(BaseModel):
    Explanation_1: Optional[Explanation] = Field(None, alias='Explanation')
    LogAnomalyToken_1: Optional[LogAnomalyToken] = Field(None, alias='LogAnomalyToken')
    LogAnomalyType_1: Optional[LogAnomalyType] = Field(None, alias='LogAnomalyType')
    LogEventId_1: Optional[LogEventId] = Field(None, alias='LogEventId')
    LogEventTimestamp: Optional[Timestamp] = None
    LogStreamName_1: Optional[LogStreamName] = Field(None, alias='LogStreamName')
    NumberOfLogLinesOccurrences_1: Optional[NumberOfLogLinesOccurrences] = Field(
        None, alias='NumberOfLogLinesOccurrences'
    )


class LogAnomalyClasses(RootModel[List[LogAnomalyClass]]):
    root: List[LogAnomalyClass] = Field(..., max_length=10, min_length=0)


class LogAnomalyShowcase(BaseModel):
    LogAnomalyClasses_1: Optional[LogAnomalyClasses] = Field(
        None, alias='LogAnomalyClasses'
    )


class LogAnomalyShowcases(RootModel[List[LogAnomalyShowcase]]):
    root: List[LogAnomalyShowcase] = Field(..., max_length=20, min_length=0)


class LogsAnomalyDetectionIntegration(BaseModel):
    OptInStatus_1: Optional[OptInStatus] = Field(None, alias='OptInStatus')


class LogsAnomalyDetectionIntegrationConfig(BaseModel):
    OptInStatus_1: Optional[OptInStatus] = Field(None, alias='OptInStatus')


class NotificationFilterConfig(BaseModel):
    MessageTypes: Optional[NotificationMessageTypes] = None
    Severities: Optional[InsightSeverities] = None


class OpsCenterIntegration(BaseModel):
    OptInStatus_1: Optional[OptInStatus] = Field(None, alias='OptInStatus')


class OpsCenterIntegrationConfig(BaseModel):
    OptInStatus_1: Optional[OptInStatus] = Field(None, alias='OptInStatus')


class PerformanceInsightsMetricDimensionGroup(BaseModel):
    Dimensions: Optional[PerformanceInsightsMetricDimensions] = None
    Group: Optional[PerformanceInsightsMetricGroup] = None
    Limit: Optional[PerformanceInsightsMetricLimitInteger] = None


class PerformanceInsightsMetricFilterMap(
    RootModel[Optional[Dict[str, PerformanceInsightsMetricFilterValue]]]
):
    root: Optional[Dict[str, PerformanceInsightsMetricFilterValue]] = None


class PerformanceInsightsMetricQuery(BaseModel):
    Filter: Optional[PerformanceInsightsMetricFilterMap] = None
    GroupBy: Optional[PerformanceInsightsMetricDimensionGroup] = None
    Metric: Optional[PerformanceInsightsMetricName] = None


class PerformanceInsightsReferenceMetric(BaseModel):
    MetricQuery: Optional[PerformanceInsightsMetricQuery] = None


class PerformanceInsightsReferenceScalar(BaseModel):
    Value: Optional[PerformanceInsightsValueDouble] = None


class PerformanceInsightsStat(BaseModel):
    Type: Optional[PerformanceInsightsStatType] = None
    Value: Optional[PerformanceInsightsValueDouble] = None


class PerformanceInsightsStats(RootModel[List[PerformanceInsightsStat]]):
    root: List[PerformanceInsightsStat]


class PredictionTimeRange(BaseModel):
    EndTime: Optional[Timestamp] = None
    StartTime: Timestamp


class PutFeedbackRequest(BaseModel):
    InsightFeedback_1: Optional[InsightFeedback] = Field(None, alias='InsightFeedback')


class RecommendationRelatedAnomalyResource(BaseModel):
    Name: Optional[RecommendationRelatedAnomalyResourceName] = None
    Type: Optional[RecommendationRelatedAnomalyResourceType] = None


class RecommendationRelatedAnomalyResources(
    RootModel[List[RecommendationRelatedAnomalyResource]]
):
    root: List[RecommendationRelatedAnomalyResource]


class RecommendationRelatedCloudWatchMetricsSourceDetail(BaseModel):
    MetricName: Optional[RecommendationRelatedCloudWatchMetricsSourceMetricName] = None
    Namespace: Optional[RecommendationRelatedCloudWatchMetricsSourceNamespace] = None


class RecommendationRelatedCloudWatchMetricsSourceDetails(
    RootModel[List[RecommendationRelatedCloudWatchMetricsSourceDetail]]
):
    root: List[RecommendationRelatedCloudWatchMetricsSourceDetail]


class RecommendationRelatedEventResource(BaseModel):
    Name: Optional[RecommendationRelatedEventResourceName] = None
    Type: Optional[RecommendationRelatedEventResourceType] = None


class RecommendationRelatedEventResources(
    RootModel[List[RecommendationRelatedEventResource]]
):
    root: List[RecommendationRelatedEventResource]


class ServiceCollection(BaseModel):
    ServiceNames_1: Optional[ServiceNames] = Field(None, alias='ServiceNames')


class ServiceHealth(BaseModel):
    AnalyzedResourceCount_1: Optional[AnalyzedResourceCount] = Field(
        None, alias='AnalyzedResourceCount'
    )
    Insight: Optional[ServiceInsightHealth] = None
    ServiceName_1: Optional[ServiceName] = Field(None, alias='ServiceName')


class ServiceHealths(RootModel[List[ServiceHealth]]):
    root: List[ServiceHealth]


class ServiceIntegrationConfig(BaseModel):
    LogsAnomalyDetection: Optional[LogsAnomalyDetectionIntegration] = None
    OpsCenter: Optional[OpsCenterIntegration] = None


class SnsChannelConfig(BaseModel):
    TopicArn_1: Optional[TopicArn] = Field(None, alias='TopicArn')


class TagCollection(BaseModel):
    AppBoundaryKey_1: AppBoundaryKey = Field(..., alias='AppBoundaryKey')
    TagValues_1: TagValues = Field(..., alias='TagValues')


class TagCollectionFilter(BaseModel):
    AppBoundaryKey_1: AppBoundaryKey = Field(..., alias='AppBoundaryKey')
    TagValues_1: TagValues = Field(..., alias='TagValues')


class TagCollectionFilters(RootModel[List[TagCollectionFilter]]):
    root: List[TagCollectionFilter]


class TagCollections(RootModel[List[TagCollection]]):
    root: List[TagCollection]


class TagCostEstimationResourceCollectionFilter(BaseModel):
    AppBoundaryKey_1: AppBoundaryKey = Field(..., alias='AppBoundaryKey')
    TagValues: CostEstimationTagValues


class TagCostEstimationResourceCollectionFilters(
    RootModel[List[TagCostEstimationResourceCollectionFilter]]
):
    root: List[TagCostEstimationResourceCollectionFilter]


class TagHealth(BaseModel):
    AnalyzedResourceCount_1: Optional[AnalyzedResourceCount] = Field(
        None, alias='AnalyzedResourceCount'
    )
    AppBoundaryKey_1: Optional[AppBoundaryKey] = Field(None, alias='AppBoundaryKey')
    Insight: Optional[InsightHealth] = None
    TagValue_1: Optional[TagValue] = Field(None, alias='TagValue')


class TagHealths(RootModel[List[TagHealth]]):
    root: List[TagHealth]


class UpdateCloudFormationCollectionFilter(BaseModel):
    StackNames: Optional[UpdateStackNames] = None


class UpdateEventSourcesConfigRequest(BaseModel):
    EventSources: Optional[EventSourcesConfig] = None


class UpdateServiceIntegrationConfig(BaseModel):
    LogsAnomalyDetection: Optional[LogsAnomalyDetectionIntegrationConfig] = None
    OpsCenter: Optional[OpsCenterIntegrationConfig] = None


class UpdateServiceIntegrationRequest(BaseModel):
    ServiceIntegration: UpdateServiceIntegrationConfig


class UpdateTagCollectionFilter(BaseModel):
    AppBoundaryKey_1: AppBoundaryKey = Field(..., alias='AppBoundaryKey')
    TagValues: UpdateTagValues


class UpdateTagCollectionFilters(RootModel[List[UpdateTagCollectionFilter]]):
    root: List[UpdateTagCollectionFilter]


class Filters(BaseModel):
    ServiceCollection_1: Optional[ServiceCollection] = Field(
        None, alias='ServiceCollection'
    )


class AnomaliesInsightInsightIdPostRequest(BaseModel):
    AccountId: Optional[constr(pattern=r'^\d{12}$', min_length=12, max_length=12)] = (
        Field(None, description='The ID of the Amazon Web Services account. ')
    )
    Filters_1: Optional[Filters] = Field(
        None,
        alias='Filters',
        description=' Specifies one or more service names that are used to list anomalies. ',
    )
    MaxResults: Optional[conint(ge=1, le=500)] = Field(
        None,
        description='The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.',
    )
    NextToken: Optional[
        constr(
            pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
            min_length=36,
            max_length=36,
        )
    ] = Field(
        None,
        description='The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.',
    )
    StartTimeRange_1: Optional[StartTimeRange] = Field(
        None,
        alias='StartTimeRange',
        description=' A time range used to specify when the behavior of an insight or anomaly started. ',
    )


class Config(BaseModel):
    Filters: Optional[NotificationFilterConfig] = None
    Sns: Optional[SnsChannelConfig] = None


class ChannelsPutRequest(BaseModel):
    Config_1: Config = Field(
        ...,
        alias='Config',
        description=' Information about notification channels you have configured with DevOps Guru. The one supported notification channel is Amazon Simple Notification Service (Amazon SNS).',
    )


class EventSources(BaseModel):
    AmazonCodeGuruProfiler: Optional[AmazonCodeGuruProfilerIntegration] = None


class EventSourcesPutRequest(BaseModel):
    EventSources_1: Optional[EventSources] = Field(
        None,
        alias='EventSources',
        description='Information about the integration of DevOps Guru as consumer with another AWS service, such as AWS CodeGuru Profiler via EventBridge.',
    )


class ResourceCollection2(BaseModel):
    CloudFormation: Optional[UpdateCloudFormationCollectionFilter] = None
    Tags: Optional[UpdateTagCollectionFilters] = None


class ResourceCollectionsPutRequest(BaseModel):
    Action_1: Action = Field(
        ...,
        alias='Action',
        description=' Specifies if the resource collection in the request is added or deleted to the resource collection. ',
    )
    ResourceCollection: ResourceCollection2 = Field(
        ...,
        description=' Contains information used to update a collection of Amazon Web Services resources. ',
    )


class ServiceIntegration(BaseModel):
    LogsAnomalyDetection: Optional[LogsAnomalyDetectionIntegrationConfig] = None
    OpsCenter: Optional[OpsCenterIntegrationConfig] = None


class ServiceIntegrationsPutRequest(BaseModel):
    ServiceIntegration_1: ServiceIntegration = Field(
        ...,
        alias='ServiceIntegration',
        description=' Information about updating the integration status of an Amazon Web Services service, such as Amazon Web Services Systems Manager, with DevOps Guru. ',
    )


class AccountHealth(BaseModel):
    AccountId: Optional[AwsAccountId] = None
    Insight: Optional[AccountInsightHealth] = None


class AccountHealths(RootModel[List[AccountHealth]]):
    root: List[AccountHealth]


class AnomalousLogGroup(BaseModel):
    ImpactEndTime: Optional[Timestamp] = None
    ImpactStartTime: Optional[Timestamp] = None
    LogAnomalyShowcases_1: Optional[LogAnomalyShowcases] = Field(
        None, alias='LogAnomalyShowcases'
    )
    LogGroupName_1: Optional[LogGroupName] = Field(None, alias='LogGroupName')
    NumberOfLogLinesScanned_1: Optional[NumberOfLogLinesScanned] = Field(
        None, alias='NumberOfLogLinesScanned'
    )


class AnomalousLogGroups(RootModel[List[AnomalousLogGroup]]):
    root: List[AnomalousLogGroup]


class CloudFormationCostEstimationResourceCollectionFilter(BaseModel):
    StackNames: Optional[CostEstimationStackNames] = None


class CloudFormationHealth(BaseModel):
    AnalyzedResourceCount_1: Optional[AnalyzedResourceCount] = Field(
        None, alias='AnalyzedResourceCount'
    )
    Insight: Optional[InsightHealth] = None
    StackName_1: Optional[StackName] = Field(None, alias='StackName')


class CloudFormationHealths(RootModel[List[CloudFormationHealth]]):
    root: List[CloudFormationHealth]


class CloudWatchMetricsDetail(BaseModel):
    Dimensions: Optional[CloudWatchMetricsDimensions] = None
    MetricDataSummary: Optional[CloudWatchMetricsDataSummary] = None
    MetricName: Optional[CloudWatchMetricsMetricName] = None
    Namespace: Optional[CloudWatchMetricsNamespace] = None
    Period: Optional[CloudWatchMetricsPeriod] = None
    Stat: Optional[CloudWatchMetricsStat] = None
    Unit: Optional[CloudWatchMetricsUnit] = None


class CloudWatchMetricsDetails(RootModel[List[CloudWatchMetricsDetail]]):
    root: List[CloudWatchMetricsDetail]


class CostEstimationResourceCollectionFilter(BaseModel):
    CloudFormation: Optional[CloudFormationCostEstimationResourceCollectionFilter] = (
        None
    )
    Tags: Optional[TagCostEstimationResourceCollectionFilters] = None


class DescribeEventSourcesConfigResponse(BaseModel):
    EventSources: Optional[EventSourcesConfig] = None


class DescribeFeedbackResponse(BaseModel):
    InsightFeedback_1: Optional[InsightFeedback] = Field(None, alias='InsightFeedback')


class DescribeOrganizationResourceCollectionHealthResponse(BaseModel):
    Account: Optional[AccountHealths] = None
    CloudFormation: Optional[CloudFormationHealths] = None
    NextToken: Optional[UuidNextToken] = None
    Service: Optional[ServiceHealths] = None
    Tags: Optional[TagHealths] = None


class DescribeResourceCollectionHealthResponse(BaseModel):
    CloudFormation: Optional[CloudFormationHealths] = None
    NextToken: Optional[UuidNextToken] = None
    Service: Optional[ServiceHealths] = None
    Tags: Optional[TagHealths] = None


class DescribeServiceIntegrationResponse(BaseModel):
    ServiceIntegration: Optional[ServiceIntegrationConfig] = None


class GetCostEstimationResponse(BaseModel):
    Costs: Optional[ServiceResourceCosts] = None
    NextToken: Optional[UuidNextToken] = None
    ResourceCollection: Optional[CostEstimationResourceCollectionFilter] = None
    Status: Optional[CostEstimationStatus] = None
    TimeRange: Optional[CostEstimationTimeRange] = None
    TotalCost: Optional[Cost] = None


class ListAnomaliesForInsightFilters(BaseModel):
    ServiceCollection_1: Optional[ServiceCollection] = Field(
        None, alias='ServiceCollection'
    )


class ListAnomaliesForInsightRequest(BaseModel):
    AccountId: Optional[AwsAccountId] = None
    Filters: Optional[ListAnomaliesForInsightFilters] = None
    MaxResults: Optional[ListAnomaliesForInsightMaxResults] = None
    NextToken: Optional[UuidNextToken] = None
    StartTimeRange_1: Optional[StartTimeRange] = Field(None, alias='StartTimeRange')


class ListAnomalousLogGroupsResponse(BaseModel):
    AnomalousLogGroups_1: AnomalousLogGroups = Field(..., alias='AnomalousLogGroups')
    InsightId_1: InsightId = Field(..., alias='InsightId')
    NextToken: Optional[UuidNextToken] = None


class ListInsightsAnyStatusFilter(BaseModel):
    StartTimeRange_1: StartTimeRange = Field(..., alias='StartTimeRange')
    Type: InsightType


class ListInsightsStatusFilter(BaseModel):
    Any: Optional[ListInsightsAnyStatusFilter] = None
    Closed: Optional[ListInsightsClosedStatusFilter] = None
    Ongoing: Optional[ListInsightsOngoingStatusFilter] = None


class ListOrganizationInsightsRequest(BaseModel):
    AccountIds: Optional[ListInsightsAccountIdList] = None
    MaxResults: Optional[ListInsightsMaxResults] = None
    NextToken: Optional[UuidNextToken] = None
    OrganizationalUnitIds: Optional[ListInsightsOrganizationalUnitIdList] = None
    StatusFilter: ListInsightsStatusFilter


class NotificationChannelConfig(BaseModel):
    Filters: Optional[NotificationFilterConfig] = None
    Sns: SnsChannelConfig


class PerformanceInsightsReferenceComparisonValues(BaseModel):
    ReferenceMetric: Optional[PerformanceInsightsReferenceMetric] = None
    ReferenceScalar: Optional[PerformanceInsightsReferenceScalar] = None


class PerformanceInsightsReferenceData(BaseModel):
    ComparisonValues: Optional[PerformanceInsightsReferenceComparisonValues] = None
    Name: Optional[PerformanceInsightsReferenceName] = None


class PerformanceInsightsReferenceDataList(
    RootModel[List[PerformanceInsightsReferenceData]]
):
    root: List[PerformanceInsightsReferenceData]


class RecommendationRelatedAnomalySourceDetail(BaseModel):
    CloudWatchMetrics: Optional[RecommendationRelatedCloudWatchMetricsSourceDetails] = (
        None
    )


class RecommendationRelatedEvent(BaseModel):
    Name: Optional[RecommendationRelatedEventName] = None
    Resources: Optional[RecommendationRelatedEventResources] = None


class RecommendationRelatedEvents(RootModel[List[RecommendationRelatedEvent]]):
    root: List[RecommendationRelatedEvent]


class RelatedAnomalySourceDetails(
    RootModel[List[RecommendationRelatedAnomalySourceDetail]]
):
    root: List[RecommendationRelatedAnomalySourceDetail]


class ResourceCollection(BaseModel):
    CloudFormation: Optional[CloudFormationCollection] = None
    Tags: Optional[TagCollections] = None


class ResourceCollectionFilter(BaseModel):
    CloudFormation: Optional[CloudFormationCollectionFilter] = None
    Tags: Optional[TagCollectionFilters] = None


class SearchInsightsFilters(BaseModel):
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )
    ServiceCollection_1: Optional[ServiceCollection] = Field(
        None, alias='ServiceCollection'
    )
    Severities: Optional[InsightSeverities] = None
    Statuses: Optional[InsightStatuses] = None


class SearchInsightsRequest(BaseModel):
    Filters: Optional[SearchInsightsFilters] = None
    MaxResults: Optional[SearchInsightsMaxResults] = None
    NextToken: Optional[UuidNextToken] = None
    StartTimeRange_1: StartTimeRange = Field(..., alias='StartTimeRange')
    Type: InsightType


class SearchOrganizationInsightsFilters(BaseModel):
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )
    ServiceCollection_1: Optional[ServiceCollection] = Field(
        None, alias='ServiceCollection'
    )
    Severities: Optional[InsightSeverities] = None
    Statuses: Optional[InsightStatuses] = None


class SearchOrganizationInsightsRequest(BaseModel):
    AccountIds: SearchInsightsAccountIdList
    Filters: Optional[SearchOrganizationInsightsFilters] = None
    MaxResults: Optional[SearchOrganizationInsightsMaxResults] = None
    NextToken: Optional[UuidNextToken] = None
    StartTimeRange_1: StartTimeRange = Field(..., alias='StartTimeRange')
    Type: InsightType


class StartCostEstimationRequest(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    ResourceCollection: CostEstimationResourceCollectionFilter


class UpdateResourceCollectionFilter(BaseModel):
    CloudFormation: Optional[UpdateCloudFormationCollectionFilter] = None
    Tags: Optional[UpdateTagCollectionFilters] = None


class UpdateResourceCollectionRequest(BaseModel):
    Action: UpdateResourceCollectionAction
    ResourceCollection: UpdateResourceCollectionFilter


class ResourceCollection1(BaseModel):
    CloudFormation: Optional[CloudFormationCostEstimationResourceCollectionFilter] = (
        None
    )
    Tags: Optional[TagCostEstimationResourceCollectionFilters] = None


class CostEstimationPutRequest(BaseModel):
    ClientToken: Optional[
        constr(pattern=r'^[a-zA-Z0-9]+[a-zA-Z0-9-]*$', min_length=1, max_length=100)
    ] = Field(
        None,
        description='The idempotency token used to identify each cost estimate request.',
    )
    ResourceCollection: ResourceCollection1 = Field(
        ...,
        description='Information about a filter used to specify which Amazon Web Services resources are analyzed to create a monthly DevOps Guru cost estimate. For more information, see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/cost-estimate.html">Estimate your Amazon DevOps Guru costs</a> and <a href="http://aws.amazon.com/devops-guru/pricing/">Amazon DevOps Guru pricing</a>. ',
    )


class Filters1(BaseModel):
    DataSource: Optional[EventDataSource] = None
    EventClass_1: Optional[EventClass] = Field(None, alias='EventClass')
    EventSource_1: Optional[EventSource] = Field(None, alias='EventSource')
    EventTimeRange_1: Optional[EventTimeRange] = Field(None, alias='EventTimeRange')
    InsightId_1: Optional[InsightId] = Field(None, alias='InsightId')
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )


class EventsPostRequest(BaseModel):
    AccountId: Optional[constr(pattern=r'^\d{12}$', min_length=12, max_length=12)] = (
        Field(None, description='The ID of the Amazon Web Services account. ')
    )
    Filters: Filters1 = Field(
        ...,
        description=' Filters you can use to specify which events are returned when <code>ListEvents</code> is called. ',
    )
    MaxResults: Optional[conint(ge=1, le=200)] = Field(
        None,
        description='The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.',
    )
    NextToken: Optional[
        constr(
            pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
            min_length=36,
            max_length=36,
        )
    ] = Field(
        None,
        description='The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.',
    )


class StatusFilter(BaseModel):
    Any: Optional[ListInsightsAnyStatusFilter] = None
    Closed: Optional[ListInsightsClosedStatusFilter] = None
    Ongoing: Optional[ListInsightsOngoingStatusFilter] = None


class InsightsPostRequest(BaseModel):
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.',
    )
    NextToken: Optional[
        constr(
            pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
            min_length=36,
            max_length=36,
        )
    ] = Field(
        None,
        description='The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.',
    )
    StatusFilter_1: StatusFilter = Field(
        ...,
        alias='StatusFilter',
        description=' A filter used by <code>ListInsights</code> to specify which insights to return. ',
    )


class Filters2(BaseModel):
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )
    ServiceCollection_1: Optional[ServiceCollection] = Field(
        None, alias='ServiceCollection'
    )
    Severities: Optional[InsightSeverities] = None
    Statuses: Optional[InsightStatuses] = None


class InsightsSearchPostRequest(BaseModel):
    Filters: Optional[Filters2] = Field(
        None,
        description='Specifies values used to filter responses when searching for insights. You can use a <code>ResourceCollection</code>, <code>ServiceCollection</code>, array of severities, and an array of status values. Each filter type contains one or more values to search for. If you specify multiple filter types, the filter types are joined with an <code>AND</code>, and the request returns only results that match all of the specified filters.',
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.',
    )
    NextToken: Optional[
        constr(
            pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
            min_length=36,
            max_length=36,
        )
    ] = Field(
        None,
        description='The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.',
    )
    StartTimeRange_1: StartTimeRange = Field(
        ...,
        alias='StartTimeRange',
        description=' A time range used to specify when the behavior of an insight or anomaly started. ',
    )
    Type_1: Type = Field(
        ...,
        alias='Type',
        description=' The type of insights you are searching for (<code>REACTIVE</code> or <code>PROACTIVE</code>). ',
    )


class OrganizationInsightsPostRequest(BaseModel):
    AccountIds: Optional[List[AwsAccountId]] = Field(
        None,
        description='The ID of the Amazon Web Services account. ',
        max_length=1,
        min_length=0,
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.',
    )
    NextToken: Optional[
        constr(
            pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
            min_length=36,
            max_length=36,
        )
    ] = Field(
        None,
        description='The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.',
    )
    OrganizationalUnitIds: Optional[List[OrganizationalUnitId]] = Field(
        None,
        description='The ID of the organizational unit.',
        max_length=1,
        min_length=0,
    )
    StatusFilter_1: StatusFilter = Field(
        ...,
        alias='StatusFilter',
        description=' A filter used by <code>ListInsights</code> to specify which insights to return. ',
    )


class OrganizationInsightsSearchPostRequest(BaseModel):
    AccountIds: List[AwsAccountId] = Field(
        ...,
        description='The ID of the Amazon Web Services account. ',
        max_length=1,
        min_length=1,
    )
    Filters: Optional[Filters2] = Field(
        None,
        description=' Filters you can use to specify which events are returned when <code>ListEvents</code> is called. ',
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.',
    )
    NextToken: Optional[
        constr(
            pattern=r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
            min_length=36,
            max_length=36,
        )
    ] = Field(
        None,
        description='The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.',
    )
    StartTimeRange_1: StartTimeRange = Field(
        ...,
        alias='StartTimeRange',
        description=' A time range used to specify when the behavior of an insight or anomaly started. ',
    )
    Type_1: Type = Field(
        ...,
        alias='Type',
        description=' The type of insights you are searching for (<code>REACTIVE</code> or <code>PROACTIVE</code>). ',
    )


class AddNotificationChannelRequest(BaseModel):
    Config: NotificationChannelConfig


class Event(BaseModel):
    DataSource: Optional[EventDataSource] = None
    EventClass_1: Optional[EventClass] = Field(None, alias='EventClass')
    EventSource_1: Optional[EventSource] = Field(None, alias='EventSource')
    Id: Optional[EventId] = None
    Name: Optional[EventName] = None
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )
    Resources: Optional[EventResources] = None
    Time: Optional[Timestamp] = None


class Events(RootModel[List[Event]]):
    root: List[Event]


class GetResourceCollectionResponse(BaseModel):
    NextToken: Optional[UuidNextToken] = None
    ResourceCollection: Optional[ResourceCollectionFilter] = None


class ListEventsFilters(BaseModel):
    DataSource: Optional[EventDataSource] = None
    EventClass_1: Optional[EventClass] = Field(None, alias='EventClass')
    EventSource_1: Optional[EventSource] = Field(None, alias='EventSource')
    EventTimeRange_1: Optional[EventTimeRange] = Field(None, alias='EventTimeRange')
    InsightId_1: Optional[InsightId] = Field(None, alias='InsightId')
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )


class ListEventsRequest(BaseModel):
    AccountId: Optional[AwsAccountId] = None
    Filters: ListEventsFilters
    MaxResults: Optional[ListEventsMaxResults] = None
    NextToken: Optional[UuidNextToken] = None


class ListEventsResponse(BaseModel):
    Events_1: Events = Field(..., alias='Events')
    NextToken: Optional[UuidNextToken] = None


class ListInsightsRequest(BaseModel):
    MaxResults: Optional[ListInsightsMaxResults] = None
    NextToken: Optional[UuidNextToken] = None
    StatusFilter: ListInsightsStatusFilter


class MonitoredResourceIdentifier(BaseModel):
    LastUpdated: Optional[Timestamp] = None
    MonitoredResourceName_1: Optional[MonitoredResourceName] = Field(
        None, alias='MonitoredResourceName'
    )
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )
    ResourcePermission_1: Optional[ResourcePermission] = Field(
        None, alias='ResourcePermission'
    )
    Type: Optional[ResourceType] = None


class MonitoredResourceIdentifiers(RootModel[List[MonitoredResourceIdentifier]]):
    root: List[MonitoredResourceIdentifier]


class NotificationChannel(BaseModel):
    Config: Optional[NotificationChannelConfig] = None
    Id: Optional[NotificationChannelId] = None


class PerformanceInsightsMetricsDetail(BaseModel):
    MetricDisplayName: Optional[PerformanceInsightsMetricDisplayName] = None
    MetricQuery: Optional[PerformanceInsightsMetricQuery] = None
    ReferenceData: Optional[PerformanceInsightsReferenceDataList] = None
    StatsAtAnomaly: Optional[PerformanceInsightsStats] = None
    StatsAtBaseline: Optional[PerformanceInsightsStats] = None
    Unit: Optional[PerformanceInsightsMetricUnit] = None


class PerformanceInsightsMetricsDetails(
    RootModel[List[PerformanceInsightsMetricsDetail]]
):
    root: List[PerformanceInsightsMetricsDetail]


class ProactiveInsight(BaseModel):
    Description: Optional[InsightDescription] = None
    Id: Optional[InsightId] = None
    InsightTimeRange_1: Optional[InsightTimeRange] = Field(
        None, alias='InsightTimeRange'
    )
    Name: Optional[InsightName] = None
    PredictionTimeRange_1: Optional[PredictionTimeRange] = Field(
        None, alias='PredictionTimeRange'
    )
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )
    Severity: Optional[InsightSeverity] = None
    SsmOpsItemId_1: Optional[SsmOpsItemId] = Field(None, alias='SsmOpsItemId')
    Status: Optional[InsightStatus] = None


class ProactiveInsightSummary(BaseModel):
    AssociatedResourceArns_1: Optional[AssociatedResourceArns] = Field(
        None, alias='AssociatedResourceArns'
    )
    Id: Optional[InsightId] = None
    InsightTimeRange_1: Optional[InsightTimeRange] = Field(
        None, alias='InsightTimeRange'
    )
    Name: Optional[InsightName] = None
    PredictionTimeRange_1: Optional[PredictionTimeRange] = Field(
        None, alias='PredictionTimeRange'
    )
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )
    ServiceCollection_1: Optional[ServiceCollection] = Field(
        None, alias='ServiceCollection'
    )
    Severity: Optional[InsightSeverity] = None
    Status: Optional[InsightStatus] = None


class ProactiveInsights(RootModel[List[ProactiveInsightSummary]]):
    root: List[ProactiveInsightSummary]


class ProactiveOrganizationInsightSummary(BaseModel):
    AccountId: Optional[AwsAccountId] = None
    Id: Optional[InsightId] = None
    InsightTimeRange_1: Optional[InsightTimeRange] = Field(
        None, alias='InsightTimeRange'
    )
    Name: Optional[InsightName] = None
    OrganizationalUnitId_1: Optional[OrganizationalUnitId] = Field(
        None, alias='OrganizationalUnitId'
    )
    PredictionTimeRange_1: Optional[PredictionTimeRange] = Field(
        None, alias='PredictionTimeRange'
    )
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )
    ServiceCollection_1: Optional[ServiceCollection] = Field(
        None, alias='ServiceCollection'
    )
    Severity: Optional[InsightSeverity] = None
    Status: Optional[InsightStatus] = None


class ProactiveOrganizationInsights(
    RootModel[List[ProactiveOrganizationInsightSummary]]
):
    root: List[ProactiveOrganizationInsightSummary]


class ReactiveInsight(BaseModel):
    Description: Optional[InsightDescription] = None
    Id: Optional[InsightId] = None
    InsightTimeRange_1: Optional[InsightTimeRange] = Field(
        None, alias='InsightTimeRange'
    )
    Name: Optional[InsightName] = None
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )
    Severity: Optional[InsightSeverity] = None
    SsmOpsItemId_1: Optional[SsmOpsItemId] = Field(None, alias='SsmOpsItemId')
    Status: Optional[InsightStatus] = None


class ReactiveInsightSummary(BaseModel):
    AssociatedResourceArns_1: Optional[AssociatedResourceArns] = Field(
        None, alias='AssociatedResourceArns'
    )
    Id: Optional[InsightId] = None
    InsightTimeRange_1: Optional[InsightTimeRange] = Field(
        None, alias='InsightTimeRange'
    )
    Name: Optional[InsightName] = None
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )
    ServiceCollection_1: Optional[ServiceCollection] = Field(
        None, alias='ServiceCollection'
    )
    Severity: Optional[InsightSeverity] = None
    Status: Optional[InsightStatus] = None


class ReactiveInsights(RootModel[List[ReactiveInsightSummary]]):
    root: List[ReactiveInsightSummary]


class ReactiveOrganizationInsightSummary(BaseModel):
    AccountId: Optional[AwsAccountId] = None
    Id: Optional[InsightId] = None
    InsightTimeRange_1: Optional[InsightTimeRange] = Field(
        None, alias='InsightTimeRange'
    )
    Name: Optional[InsightName] = None
    OrganizationalUnitId_1: Optional[OrganizationalUnitId] = Field(
        None, alias='OrganizationalUnitId'
    )
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )
    ServiceCollection_1: Optional[ServiceCollection] = Field(
        None, alias='ServiceCollection'
    )
    Severity: Optional[InsightSeverity] = None
    Status: Optional[InsightStatus] = None


class ReactiveOrganizationInsights(RootModel[List[ReactiveOrganizationInsightSummary]]):
    root: List[ReactiveOrganizationInsightSummary]


class RecommendationRelatedAnomaly(BaseModel):
    AnomalyId_1: Optional[AnomalyId] = Field(None, alias='AnomalyId')
    Resources: Optional[RecommendationRelatedAnomalyResources] = None
    SourceDetails: Optional[RelatedAnomalySourceDetails] = None


class SearchInsightsResponse(BaseModel):
    NextToken: Optional[UuidNextToken] = None
    ProactiveInsights_1: Optional[ProactiveInsights] = Field(
        None, alias='ProactiveInsights'
    )
    ReactiveInsights_1: Optional[ReactiveInsights] = Field(
        None, alias='ReactiveInsights'
    )


class SearchOrganizationInsightsResponse(BaseModel):
    NextToken: Optional[UuidNextToken] = None
    ProactiveInsights_1: Optional[ProactiveInsights] = Field(
        None, alias='ProactiveInsights'
    )
    ReactiveInsights_1: Optional[ReactiveInsights] = Field(
        None, alias='ReactiveInsights'
    )


class AnomalySourceDetails(BaseModel):
    CloudWatchMetrics: Optional[CloudWatchMetricsDetails] = None
    PerformanceInsightsMetrics: Optional[PerformanceInsightsMetricsDetails] = None


class Channels(RootModel[List[NotificationChannel]]):
    root: List[NotificationChannel]


class DescribeInsightResponse(BaseModel):
    ProactiveInsight_1: Optional[ProactiveInsight] = Field(
        None, alias='ProactiveInsight'
    )
    ReactiveInsight_1: Optional[ReactiveInsight] = Field(None, alias='ReactiveInsight')


class ListInsightsResponse(BaseModel):
    NextToken: Optional[UuidNextToken] = None
    ProactiveInsights_1: Optional[ProactiveInsights] = Field(
        None, alias='ProactiveInsights'
    )
    ReactiveInsights_1: Optional[ReactiveInsights] = Field(
        None, alias='ReactiveInsights'
    )


class ListMonitoredResourcesResponse(BaseModel):
    MonitoredResourceIdentifiers_1: MonitoredResourceIdentifiers = Field(
        ..., alias='MonitoredResourceIdentifiers'
    )
    NextToken: Optional[UuidNextToken] = None


class ListNotificationChannelsResponse(BaseModel):
    Channels_1: Optional[Channels] = Field(None, alias='Channels')
    NextToken: Optional[UuidNextToken] = None


class ListOrganizationInsightsResponse(BaseModel):
    NextToken: Optional[UuidNextToken] = None
    ProactiveInsights: Optional[ProactiveOrganizationInsights] = None
    ReactiveInsights: Optional[ReactiveOrganizationInsights] = None


class ProactiveAnomaly(BaseModel):
    AnomalyReportedTimeRange_1: Optional[AnomalyReportedTimeRange] = Field(
        None, alias='AnomalyReportedTimeRange'
    )
    AnomalyResources_1: Optional[AnomalyResources] = Field(
        None, alias='AnomalyResources'
    )
    AnomalyTimeRange_1: Optional[AnomalyTimeRange] = Field(
        None, alias='AnomalyTimeRange'
    )
    AssociatedInsightId: Optional[InsightId] = None
    Description: Optional[AnomalyDescription] = None
    Id: Optional[AnomalyId] = None
    Limit: Optional[AnomalyLimit] = None
    PredictionTimeRange_1: Optional[PredictionTimeRange] = Field(
        None, alias='PredictionTimeRange'
    )
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )
    Severity: Optional[AnomalySeverity] = None
    SourceDetails: Optional[AnomalySourceDetails] = None
    SourceMetadata: Optional[AnomalySourceMetadata] = None
    Status: Optional[AnomalyStatus] = None
    UpdateTime: Optional[Timestamp] = None


class ProactiveAnomalySummary(BaseModel):
    AnomalyReportedTimeRange_1: Optional[AnomalyReportedTimeRange] = Field(
        None, alias='AnomalyReportedTimeRange'
    )
    AnomalyResources_1: Optional[AnomalyResources] = Field(
        None, alias='AnomalyResources'
    )
    AnomalyTimeRange_1: Optional[AnomalyTimeRange] = Field(
        None, alias='AnomalyTimeRange'
    )
    AssociatedInsightId: Optional[InsightId] = None
    Description: Optional[AnomalyDescription] = None
    Id: Optional[AnomalyId] = None
    Limit: Optional[AnomalyLimit] = None
    PredictionTimeRange_1: Optional[PredictionTimeRange] = Field(
        None, alias='PredictionTimeRange'
    )
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )
    Severity: Optional[AnomalySeverity] = None
    SourceDetails: Optional[AnomalySourceDetails] = None
    SourceMetadata: Optional[AnomalySourceMetadata] = None
    Status: Optional[AnomalyStatus] = None
    UpdateTime: Optional[Timestamp] = None


class ReactiveAnomaly(BaseModel):
    AnomalyReportedTimeRange_1: Optional[AnomalyReportedTimeRange] = Field(
        None, alias='AnomalyReportedTimeRange'
    )
    AnomalyResources_1: Optional[AnomalyResources] = Field(
        None, alias='AnomalyResources'
    )
    AnomalyTimeRange_1: Optional[AnomalyTimeRange] = Field(
        None, alias='AnomalyTimeRange'
    )
    AssociatedInsightId: Optional[InsightId] = None
    CausalAnomalyId: Optional[AnomalyId] = None
    Description: Optional[AnomalyDescription] = None
    Id: Optional[AnomalyId] = None
    Name: Optional[AnomalyName] = None
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )
    Severity: Optional[AnomalySeverity] = None
    SourceDetails: Optional[AnomalySourceDetails] = None
    Status: Optional[AnomalyStatus] = None
    Type: Optional[AnomalyType] = None


class ReactiveAnomalySummary(BaseModel):
    AnomalyReportedTimeRange_1: Optional[AnomalyReportedTimeRange] = Field(
        None, alias='AnomalyReportedTimeRange'
    )
    AnomalyResources_1: Optional[AnomalyResources] = Field(
        None, alias='AnomalyResources'
    )
    AnomalyTimeRange_1: Optional[AnomalyTimeRange] = Field(
        None, alias='AnomalyTimeRange'
    )
    AssociatedInsightId: Optional[InsightId] = None
    CausalAnomalyId: Optional[AnomalyId] = None
    Description: Optional[AnomalyDescription] = None
    Id: Optional[AnomalyId] = None
    Name: Optional[AnomalyName] = None
    ResourceCollection_1: Optional[ResourceCollection] = Field(
        None, alias='ResourceCollection'
    )
    Severity: Optional[AnomalySeverity] = None
    SourceDetails: Optional[AnomalySourceDetails] = None
    Status: Optional[AnomalyStatus] = None
    Type: Optional[AnomalyType] = None


class RecommendationRelatedAnomalies(RootModel[List[RecommendationRelatedAnomaly]]):
    root: List[RecommendationRelatedAnomaly]


class DescribeAnomalyResponse(BaseModel):
    ProactiveAnomaly_1: Optional[ProactiveAnomaly] = Field(
        None, alias='ProactiveAnomaly'
    )
    ReactiveAnomaly_1: Optional[ReactiveAnomaly] = Field(None, alias='ReactiveAnomaly')


class ProactiveAnomalies(RootModel[List[ProactiveAnomalySummary]]):
    root: List[ProactiveAnomalySummary]


class ReactiveAnomalies(RootModel[List[ReactiveAnomalySummary]]):
    root: List[ReactiveAnomalySummary]


class Recommendation(BaseModel):
    Category: Optional[RecommendationCategory] = None
    Description: Optional[RecommendationDescription] = None
    Link: Optional[RecommendationLink] = None
    Name: Optional[RecommendationName] = None
    Reason: Optional[RecommendationReason] = None
    RelatedAnomalies: Optional[RecommendationRelatedAnomalies] = None
    RelatedEvents: Optional[RecommendationRelatedEvents] = None


class Recommendations(RootModel[List[Recommendation]]):
    root: List[Recommendation] = Field(..., max_length=10, min_length=0)


class ListAnomaliesForInsightResponse(BaseModel):
    NextToken: Optional[UuidNextToken] = None
    ProactiveAnomalies_1: Optional[ProactiveAnomalies] = Field(
        None, alias='ProactiveAnomalies'
    )
    ReactiveAnomalies_1: Optional[ReactiveAnomalies] = Field(
        None, alias='ReactiveAnomalies'
    )


class ListRecommendationsResponse(BaseModel):
    NextToken: Optional[UuidNextToken] = None
    Recommendations_1: Optional[Recommendations] = Field(None, alias='Recommendations')
